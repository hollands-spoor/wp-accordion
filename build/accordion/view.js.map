{"version":3,"file":"accordion/view.js","mappings":"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","sources":["webpack://accordion/./src/accordion/view.js"],"sourcesContent":["/**\n * Initialize the accordion block.\n * Add event listeners to the accordion panes.\n * Open first pane when collapsed is false.\n * On opening a pane, close all other panes when oneAtATime is true.\n * On opening and closing a pane, set max-height of the pane-content. This allows for css transitions.\n */\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n\tconst accordionBlocks = document.querySelectorAll(\n\t\t\".wp-block-hs-blocks-accordion\",\n\t);\n\n\t/**\n\t * Scrollheight is not correct during transition. So it can not serve during\n\t * transition of the max height of a pane.\n\t *\n\t * Therefore this method is called twice: once before transition with reset = true.\n\t * Then again after transition with reset = false. The parent needs its\n\t * css max-height set afterwards for the case that this parent itself is\n\t * collapsed by the user. All this is only here for the case the accordion\n\t * needs animation by means of .js class-changes and css.\n\t *\n\t * max-height and its css transition seems to be the most used way to animate.\n\t * But maybe something else can be found?\n\t *\n\t * TODO: reset can be called unset, for that is what actually happens during\n\t * the transition.\n\t *\n\t * Traverse upwards in the DOM and find out if accordion-block is inside the pane\n\t * of another accordion-block.\n\t * If so, unset the max-height of the content of that parent pane during\n\t * animation ( i.e. during transition of css max-height ).\n\t * After the transition is done, set\n\t * the max-height back to the content's scrollHeight.\n\t */\n\tconst checkForParentPane = (element, unset) => {\n\t\tconst parentPane = element.closest(\".wp-block-hs-blocks-accordion-pane\");\n\t\tif (parentPane) {\n\t\t\tconst content = parentPane.querySelector(\".pane-content\");\n\t\t\tif (unset) {\n\t\t\t\tcontent.style.removeProperty('max-height');\n\t\t\t} else {\n\t\t\t\tcontent.style.maxHeight = content.scrollHeight + \"px\";\n\t\t\t}\n\t\t\tconst parentBlock = parentPane.closest(\".wp-block-hs-blocks-accordion\");\n\t\t\tif (parentBlock) {\n\t\t\t\tcheckForParentPane(parentBlock);\n\t\t\t}\n\t\t}\n\t};\n\n\n\tconst getElementOffset = (el) => {\n\t\tconst rect = el.getBoundingClientRect();\n\t\treturn {\n\t\t  left: rect.left + window.scrollX,\n\t\t  top: rect.top + window.scrollY\n\t\t};\n\t}\n\n\tconst getElementHeight = (el) => {\n\t\tconst styles = window.getComputedStyle(el);\n\t\tconst margin = parseFloat(styles['marginTop']) +\n\t\t\t\t\t parseFloat(styles['marginBottom']);\n\t\treturn Math.ceil(el.offsetHeight + margin);\n\t}\n\n\n\n\taccordionBlocks.forEach((block) => {\n\t\tconst oneAtATime = block.getAttribute(\"data-one-at-a-time\") === \"true\";\n\t\tconst collapsed = block.getAttribute(\"data-collapsed\") === \"true\";\n\t\tconst accordionPanes = block.querySelectorAll(\n\t\t\t\":scope > .wp-block-hs-blocks-accordion-pane\",\n\t\t);\n\n\t\taccordionPanes.forEach((pane, index) => {\n\t\t\tconst header = pane.querySelector(\".pane-header\");\n\t\t\tconst content = pane.querySelector(\".pane-content\");\n\t\t\t// If collapsed is false, open the first pane\n\t\t\tif (!collapsed && index === 0) {\n\t\t\t\tpane.classList.add(\"active\");\n\t\t\t\tcontent.style.maxHeight = content.scrollHeight + \"px\";\n\t\t\t\tcheckForParentPane(block, false);\n\t\t\t} else {\n\t\t\t\tcontent.style.maxHeight = \"0\";\n\t\t\t}\n\n\t\t\theader.addEventListener(\"click\", function (event) {\n\t\t\t\tif (oneAtATime) {\n\t\t\t\t\t// Close other open panes, i.e. remove 'active' class from all sibling panes\n\t\t\t\t\taccordionPanes.forEach((siblingPane) => {\n\t\t\t\t\t\tif (siblingPane !== pane) {\n\t\t\t\t\t\t\tsiblingPane.classList.remove(\"active\");\n\t\t\t\t\t\t\tsiblingPane.querySelector(\".pane-content\").style.maxHeight = \"0\";\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tpane.classList.toggle(\"active\");\n\t\t\t\tif (pane.classList.contains(\"active\")) {\n\t\t\t\t\tcontent.style.maxHeight = content.scrollHeight + \"px\";\n\t\t\t\t\tpane.classList.add('opening');\n\t\t\t\t\t// Pane can be clicked during animation\n\t\t\t\t\tpane.classList.remove('closing');\n\t\t\t\t\t//scroll to position of the currently opened pane-header. Maybe some previous pane is in the process of closing, so the position is calculate in advance by taking the top of the current accordion block and then add ( index * height of the paneheader ).\n\t\t\t\t\tif( oneAtATime ) {\n\t\t\t\t\t\tconst paneHeaderHeight = getElementHeight( header);\n\t\t\t\t\t\tconst newScrollPosition =  getElementOffset(block).top + ( index * paneHeaderHeight );\n\t\t\t\t\t\tconst currentScrollPosition = document.documentElement.scrollTop; // Check browsersupport for this\n\t\t\t\t\t\tif( newScrollPosition < currentScrollPosition){\n\t\t\t\t\t\t\twindow.scrollTo({ top: newScrollPosition, behavior: \"smooth\" });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcontent.style.maxHeight = \"0\";\n\t\t\t\t\t// Pane can be clicked during animation\n\t\t\t\t\tpane.classList.remove('opening');\n\t\t\t\t\tpane.classList.add('closing');\n\n\t\t\t\t}\n\n\t\t\t\t/**\n                 * If url must be changed when a pane is opened, it can be done here. \n\t\t\t\t * However, it assumes header has an id.\n                 * if(pane.classList.contains(\"active\")) {\n                 *   const id = header.id;\n                 *   window.history.pushState(null, null, `#${id}`);\n                 * } else {\n                 *   window.history.pushState(null, null, window.location.pathname);\n                 * }\n                */\n\n\t\t\t\t// Check if current accordion block is in the pane of another accordion.\n\t\t\t\tcheckForParentPane(block, true);\n\t\t\t\tcontent.addEventListener(\n\t\t\t\t\t\"transitionend\",\n\t\t\t\t\tfunction onTransitionEnd(event) {\n\t\t\t\t\t\tif (event.propertyName === \"max-height\") {\n\t\t\t\t\t\t\tcontent.removeEventListener(\"transitionend\", onTransitionEnd);\n\t\t\t\t\t\t\tpane.classList.remove('opening');\n\t\t\t\t\t\t\tpane.classList.remove('closing');\n\t\t\t\t\t\t\tcheckForParentPane(block, false);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t});\n\n\t\t\t\n\t\t\t// Add key down event listener to handle Enter key\n\t\t\theader.addEventListener(\"keydown\", function (event) {\n\t\t\t\tif (event.code === \"Enter\" || event.key === \"Enter\") {\n\t\t\t\t\tif (document.activeElement === header) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\theader.click();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t});\n});\n"],"names":["document","addEventListener","accordionBlocks","querySelectorAll","checkForParentPane","element","unset","parentPane","closest","content","querySelector","style","removeProperty","maxHeight","scrollHeight","parentBlock","getElementOffset","el","rect","getBoundingClientRect","left","window","scrollX","top","scrollY","getElementHeight","styles","getComputedStyle","margin","parseFloat","Math","ceil","offsetHeight","forEach","block","oneAtATime","getAttribute","collapsed","accordionPanes","pane","index","header","classList","add","event","siblingPane","remove","toggle","contains","paneHeaderHeight","newScrollPosition","currentScrollPosition","documentElement","scrollTop","scrollTo","behavior","onTransitionEnd","propertyName","removeEventListener","code","key","activeElement","preventDefault","stopPropagation","click"],"sourceRoot":""}